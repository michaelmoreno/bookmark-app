[{"/home/michael/bookmark-app/frontend/src/index.js":"1","/home/michael/bookmark-app/frontend/src/App.js":"2","/home/michael/bookmark-app/frontend/src/DataLayer.js":"3","/home/michael/bookmark-app/frontend/src/Bookmark.jsx":"4","/home/michael/bookmark-app/frontend/src/BookmarkAdder.jsx":"5"},{"size":432,"mtime":1607942362188,"results":"6","hashOfConfig":"7"},{"size":914,"mtime":1608088456006,"results":"8","hashOfConfig":"7"},{"size":1462,"mtime":1608080545709,"results":"9","hashOfConfig":"7"},{"size":1169,"mtime":1608088343631,"results":"10","hashOfConfig":"7"},{"size":728,"mtime":1608087924853,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1y4p141",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},"/home/michael/bookmark-app/frontend/src/index.js",[],["27","28"],"/home/michael/bookmark-app/frontend/src/App.js",["29"],"/home/michael/bookmark-app/frontend/src/DataLayer.js",["30","31"],"export default class DataLayer {\n\n  constructor(host, port) {\n    this.hookUpdate = null;\n    this.host = host;\n    this.port = port;\n\n    console.log(this.host);\n    console.log(this.port);\n\n    console.log(this.host);\n    console.log(this.port);\n  }\n\n  makeUrl(uri) {\n    return `http://${this.host}:${this.port}/${uri}`\n  }\n\n  async apiFetch(ep, options) {\n    const url = this.makeUrl(ep);\n    const resp = await fetch(url, options);\n    return resp.json();\n  }\n\n  async trigger() {\n    const bookmarks = await this.all();\n    this.hookUpdate(bookmarks);\n  }\n\n  async all() { // fetch all bookmarks\n    var bookmarks = await this.apiFetch(\"all\");\n    return bookmarks;\n  };\n\n  async add(name, url) { // post to /add\n    const bookmark = await this.apiFetch(\"add\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ name, url }),\n    })\n    this.trigger();\n  };\n\n  async delete(id) { // delete bookmark by id\n    await this.apiFetch(\"delete\", {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ id }),\n    })\n    this.trigger();\n  }\n\n  async update(id, name, url) {  // update bookmark by id\n    const bookmark = await this.apiFetch(\"update\", {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ id, name, url }),\n    });\n    this.trigger();\n  }\n}","/home/michael/bookmark-app/frontend/src/Bookmark.jsx",["32"],"import React, { useState } from 'react'\nimport DataLayer from './DataLayer'\n\nexport default function Bookmark({ data, api }) {\n  // state hooks\n  const [ name, setName ] = useState(data.name);\n  const [ url, setUrl ] = useState(data.url);\n\n  // user edited name text box\n  const onNameChange = event => {\n    const newName = event.target.value;\n    // use name state hook\n    setName(newName);\n  };\n\n  // user edited url text box\n  const onUrlChange = event => {\n    const newUrl = event.target.value;\n    // use url state hook\n    setUrl(newUrl);\n  };\n\n  // user pressed edit button\n  const onUpdate = event =>  {\n    event.preventDefault();\n    // send new data to backend api\n    api.update(data._id, name, url);\n  };\n\n  // user pressed delete button\n  const onDelete = (event) => {\n    event.preventDefault();\n    // send deleted _id to backend api\n    api.delete(data._id);\n  }\n\n  return (\n    <form className=\"bookmark\">\n      <input type=\"text\" onChange={onNameChange} value={name}/>\n      <input type=\"text\" onChange={onUrlChange} value={url}/>\n      <button onClick={onUpdate}>Update</button>\n      <button onClick={onDelete}>Delete</button>\n    </form>\n  )\n}\n","/home/michael/bookmark-app/frontend/src/BookmarkAdder.jsx",["33"],"import React, { useState } from 'react'\nimport DataLayer from './DataLayer'\n\nexport default function BookmarkAdder({ api }) {\n  const [ name, setName ] = useState('');\n  const [ url, setUrl ] = useState('');\n  \n  const onNameChange = (event) => {\n    const newName = event.target.value;\n    setName(newName);\n\n  }\n\n  const onUrlChange = (event) => {\n    const newUrl = event.target.value;\n    setUrl(newUrl);\n  }\n\n  const onAdd = () => {\n    api.add(name, url);\n    \n  }\n\n  return (\n    <div>\n      <input type=\"text\" className=\"name\" onChange={onNameChange} value={name}/>\n      <input type=\"text\" className=\"url\" onChange={onUrlChange} value={url}/>\n      <button onClick={onAdd}id=\"Add\">add</button>\n    </div>    \n  );\n  \n}\n",["34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":24,"column":9,"nodeType":"42","messageId":"43","endLine":24,"endColumn":16},{"ruleId":"40","severity":1,"message":"44","line":36,"column":11,"nodeType":"42","messageId":"43","endLine":36,"endColumn":19},{"ruleId":"40","severity":1,"message":"44","line":58,"column":11,"nodeType":"42","messageId":"43","endLine":58,"endColumn":19},{"ruleId":"40","severity":1,"message":"45","line":2,"column":8,"nodeType":"42","messageId":"43","endLine":2,"endColumn":17},{"ruleId":"40","severity":1,"message":"45","line":2,"column":8,"nodeType":"42","messageId":"43","endLine":2,"endColumn":17},{"ruleId":"36","replacedBy":"46"},{"ruleId":"38","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'addBKMK' is assigned a value but never used.","Identifier","unusedVar","'bookmark' is assigned a value but never used.","'DataLayer' is defined but never used.",["48"],["49"],"no-global-assign","no-unsafe-negation"]